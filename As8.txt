/* FCFS
#include<bits/stdc++.h>
using namespace std;
int main(){
  int m,n,h,sum=0;
  cout<<"Enter disk size: ";
  cin>>m;
  cout<<"Enter input string size: ";
  cin>>n;
  vector<int> a(n);
  cout<<"Enter input string";
  for(int i=0;i<n;i++){
    cin>>a[i];
  if(a[i]>m){
    cout<<"Invalid input";
    i--;
  }
  }
  cout<<"Enter head position: ";
  cin>>h;
  int temp=h;
  cout<<temp;
  for(int i=0;i<n;i++){
    cout<<"->"<<a[i]<<"";
    sum += abs(a[i]-temp);
    temp=a[i];
  }
  cout<<"\n";
  cout<<"Total head movements = "<<sum<<"\n";
  return 0;
} */

// SSTF
/* #include<bits/stdc++.h>
using namespace std;

void calculatedifference(int request[],int head, int diff[][2],int n){
  for(int i=0;i<n;i++){
    diff[i][0] = abs(head-request[i]);
  }
}
int findmin(int diff[][2],int n){
  int index = -1;
  int minimum = 1e9;
  for(int i=0;i<n;i++){
    if(!diff[i][1] && minimum>diff[i][0]){
      minimum = diff[i][0];
      index = i;
    }
  }
  return index;
}

void SSTF(int request[],int head,int n){
  if(n==0)
    return;

  int diff[n][2]= {{0,0}};
  int seekcount =0;
  int seeksequence[n+1] = {0};

  for(int i=0;i<n;i++){
    seeksequence[i] = head;
    calculatedifference(request,head,diff,n);
    int index = findmin(diff,n);
    diff[index][1] = 1;
    seekcount += diff[index][0];
    head = request[index];
  }
  seeksequence[n] = head;
  cout<<"Total number of seek operations = "<< seekcount<<endl;
  cout<<"Seek sequence is"<<endl;

  for(int i=0;i<=n;i++){
    cout<<seeksequence[i]<<" ";
  }
  
}

int main(){
  int n = 8;
  int proc[n] = {14,37,65,67,98,122,183,124};
  SSTF(proc,53,n);
  return 0;
}
*/

// SCAN
/* #include<bits/stdc++.h>
using namespace std;
void SCAN(int arr[],int head,string direction,int size, int disksize){
  int seekcount =0;
  int distance, cur_track;
  vector<int> left,right;
  vector<int> seeksequence;
  if(direction=="left")left.push_back(0);
  else if(direction=="right")right.push_back(disksize-1);

  for(int i=0;i<size;i++){
    if(arr[i]<head)left.push_back(arr[i]);
    if(arr[i]>head)right.push_back(arr[i]);
  }
  sort(left.begin(),left.end());
  sort(right.begin(),right.end());

  int run=2;
  while(run--){
    if(direction=="left"){
      for(int i=left.size()-1;i>=0;i--){
        cur_track=left[i];
        seeksequence.push_back(cur_track);
        distance=abs(cur_track-head);
        seekcount+=distance;
        head=cur_track;
      }
      direction="right";
    }
    else if(direction=="right"){
      for(int i=0;i<right.size();i++){
        cur_track=right[i];
        seeksequence.push_back(cur_track);
        distance=abs(cur_track-head);
        seekcount+=distance;
        head=cur_track;
      }
      direction="left";
    }
  }
  cout<<"Total number of seek operations = "<<seekcount<<"\n";
  cout<<"Seek Sequence is: ";
  for(int i=0;i<seeksequence.size();i++){
    if(i==seeksequence.size()-1) cout<<seeksequence[i];
    else cout<<seeksequence[i]<<"->";
  }
  
  
}
int main(){
  int size =7;
  int disksize=200;
  int arr[7]={16,24,43,82,140,170,190};
  int head = 50;
  string direction="right";
  SCAN(arr,head,direction,size,disksize);
  return 0;
}*/

// C Scan
#include<bits/stdc++.h>
using namespace std;
void CSCAN(int arr[],int head,int size, int disksize){
  int seekcount=0;
  int distance,curtrack;
  vector<int> left,right;
  vector<int> seeksequence;

  left.push_back(0);
  right.push_back(disksize-1);

  for(int i=0;i<size;i++){
    if(arr[i]<head) left.push_back(arr[i]);
    else if(arr[i]>head) right.push_back(arr[i]);
  }
  sort(left.begin(),left.end());
  sort(right.begin(),right.end());

  for(int i=0;i<right.size();i++){
    curtrack=right[i];
    seeksequence.push_back(curtrack);
    distance=abs(curtrack-head);
    seekcount+=distance;
    head=curtrack;
  }
  head=0;
  seekcount+=(disksize-1);
  for(int i=0;i<left.size();i++){
    curtrack=left[i];
    seeksequence.push_back(curtrack);
    distance=abs(curtrack-head);
    seekcount+=distance;
    head=curtrack;
  }
  cout<<"Total number of seek operations: "<<seekcount<<"\n";
  cout<<"Seek Sequence is: "<<endl;
  for(int i=0;i<seeksequence.size();i++){
    if(i==seeksequence.size()-1) cout<<seeksequence[i]<<" ";
    else cout<<seeksequence[i]<<"->";
  }
}
int main(){
  int size=8;
  int disksize=200;
  int arr[8] = {16,24,43,82,140,170,190,199};
  int head=50;
  cout<<"Initial position of head: "<<head<<endl;
  CSCAN(arr,head,size,disksize);
  return 0;
}
