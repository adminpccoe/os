FCFS
#include <stdio.h>
int main() {
// Number of processes
int n;
printf("Enter the number of processes: ");
scanf("%d", &n);
// Arrival times, burst times, completion times, turnaround times, waiting times arrays
int at[n], bt[n], ct[n], tat[n], wt[n];
// Input arrival times and burst times for each process
printf("Enter arrival times and burst times for each process:\n");
for (int i = 0; i < n; i++) {
printf("Process %d:\n", i + 1);
printf("Arrival Time: ");
scanf("%d", &at[i]);
printf("Burst Time: ");
scanf("%d", &bt[i]);
}
// Calculate completion times and turnaround times
ct[0] = at[0] + bt[0];
tat[0] = ct[0] - at[0];
wt[0] = 0;
for (int i = 1; i < n; i++) {
ct[i] = ct[i - 1] + bt[i];
tat[i] = ct[i] - at[i];
wt[i] = tat[i] - bt[i];
}

// Calculate average turnaround time and average waiting time
float avg_tat = 0, avg_wt = 0;
for (int i = 0; i < n; i++) {
avg_tat += tat[i];
avg_wt += wt[i];
}
avg_tat /= n;
avg_wt /= n;
// Display results
printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting
Time\n");
for (int i = 0; i < n; i++) {
printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], ct[i], tat[i], wt[i]);
}
printf("\nAverage Turnaround Time: %.2f\n", avg_tat);
printf("Average Waiting Time: %.2f\n", avg_wt);
return 0;
}

Output:

SJF:
#include <stdio.h>
struct Process {
int arrival_time;
int burst_time;
int waiting_time;
};
int compare(const void *a, const void *b) {
struct Process *p1 = (struct Process *)a;
struct Process *p2 = (struct Process *)b;
return p1->burst_time - p2->burst_time;
}
int main() {
int n, i, j;
float avg_waiting_time = 0, avg_turnaround_time = 0;
printf("Enter the number of processes: ");
scanf("%d", &n);
struct Process processes[n];
for (i = 0; i< n; i++) {
printf("Enter arrival time and burst time of process %d: ", i+1);
scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
}
qsort(processes, n, sizeof(struct Process), compare);
processes[0].waiting_time = 0;
for (i = 1; i< n; i++) {
processes[i].waiting_time = 0;
for (j = 0; j <i; j++)
{
processes[i].waiting_time += processes[j].burst_time;
}

avg_waiting_time += processes[i].waiting_time;
}
avg_waiting_time /= n;
for (i = 0; i< n; i++) {
avg_turnaround_time += processes[i].burst_time + processes[i].waiting_time;
}
avg_turnaround_time /= n;
printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
for (i = 0; i< n; i++) {
printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, processes[i].arrival_time,
processes[i].burst_time, processes[i].waiting_time,
processes[i].burst_time+processes[i].waiting_time);
}
printf("\nAverage Waiting Time: %f\n", avg_waiting_time);
printf("Average Turnaround Time: %f\n", avg_turnaround_time);
return 0;
}
Output:

Round Robin:
#include<stdio.h>
int main()
{
//Input no of processed
int n;
printf("Enter Total Number of Processes:");
scanf("%d", &n);
int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n], temp_burst_time[n];
int x = n;
//Input details of processes
for(int i = 0; i < n; i++)
{
printf("Enter Details of Process %d \n", i + 1);
printf("Arrival Time: ");
scanf("%d", &arr_time[i]);
printf("Burst Time: ");
scanf("%d", &burst_time[i]);
temp_burst_time[i] = burst_time[i];
}
//Input time slot
int time_slot;
printf("Enter Time Quantum:");
scanf("%d", &time_slot);

//Total indicates total time
//counter indicates which process is executed
int total = 0, counter = 0,i;
printf("Process ID Burst Time Turnaround Time Waiting Time\n");
for(total=0, i = 0; x!=0; )
{
// define the conditions
if(temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0)
{
total = total + temp_burst_time[i];
temp_burst_time[i] = 0;
counter=1;
}
else if(temp_burst_time[i] > 0)
{
temp_burst_time[i] = temp_burst_time[i] - time_slot;
total += time_slot;
}
if(temp_burst_time[i]==0 && counter==1)
{
x--; //decrement the process no.
printf("\nProcess No %d \t\t %d\t\t\t\t %d\t\t\t %d", i+1, burst_time[i],
total-arr_time[i], total-arr_time[i]-burst_time[i]);
wait_time = wait_time+total-arr_time[i]-burst_time[i];
ta_time += total -arr_time[i];
counter =0;
}
if(i==n-1)
{
i=0;
}
else if(arr_time[i+1]<=total)
{
i++;
}
else
{
i=0;
}
}

float average_wait_time = wait_time * 1.0 / n;
float average_turnaround_time = ta_time * 1.0 / n;
printf("\nAverage Waiting Time:%f", average_wait_time);
printf("\nAvg Turnaround Time:%f", average_turnaround_time);
return 0;
}
Output:

Priority :
#include<stdio.h>
// Structure to represent a process
struct Process {
int process_id; // Process ID
int priority; // Priority of the process
int burst_time; // Burst time of the process
};
// Function to swap two processes
void swap(struct Process *a, struct Process *b) {
struct Process temp = *a;
*a = *b;
*b = temp;

}
// Function to perform Priority Scheduling
void priorityScheduling(struct Process processes[], int n) {
// Sort the processes based on priority (higher priority first)
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
if (processes[j].priority > processes[j + 1].priority) {
swap(&processes[j], &processes[j + 1]);
}
}
}
// Variables to store waiting time and turnaround time
int waiting_time[n], turnaround_time[n];
// Calculate waiting time and turnaround time for each process
waiting_time[0] = 0;
turnaround_time[0] = processes[0].burst_time;
for (int i = 1; i < n; i++) {
waiting_time[i] = waiting_time[i - 1] + processes[i - 1].burst_time;
turnaround_time[i] = waiting_time[i] + processes[i].burst_time;
}
// Calculate total waiting time and turnaround time
double total_waiting_time = 0, total_turnaround_time = 0;
for (int i = 0; i < n; i++) {
total_waiting_time += waiting_time[i];
total_turnaround_time += turnaround_time[i];
}
// Print the details of each process
printf("Process ID\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
for (int i = 0; i < n; i++) {
printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].priority,
processes[i].burst_time, waiting_time[i], turnaround_time[i]);
}
// Print average waiting time and average turnaround time

printf("Average Waiting Time: %.2lf\n", total_waiting_time / n);
printf("Average Turnaround Time: %.2lf\n", total_turnaround_time / n);
}
int main() {
int n;
printf("Enter the number of processes: ");
scanf("%d", &n);
// Declare an array of processes
struct Process processes[n];
// Input details of each process
for (int i = 0; i < n; i++) {
printf("Enter details for Process %d:\n", i + 1);
printf("Process ID: ");
scanf("%d", &processes[i].process_id);
printf("Priority: ");
scanf("%d", &processes[i].priority);
printf("Burst Time: ");
scanf("%d", &processes[i].burst_time);
}
// Perform Priority Scheduling
priorityScheduling(processes, n);
return 0;
}
