//FCFS 
#include <iostream>
using namespace std;
int main() {
int incomingStream[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 1, 2, 0};
int pageFaults = 0;
int pageHits = 0;
int frames = 3;
int m, n, s, pages;
pages = sizeof(incomingStream)/sizeof(incomingStream[0]);
cout << " Incoming \t Frame 1 \t Frame 2 \t Frame 3 \n";
int temp[ frames ];
for(m = 0; m < frames; m++) {
temp[m] = -1;
}
for(m = 0; m < pages; m++) {
s = 0;
for(n = 0; n < frames; n++) {
if(incomingStream[m] == temp[n]) {
s++;
pageHits++; // Increment hits counter
pageFaults--;
}
}
pageFaults++;
if((pageFaults <= frames) && (s == 0)) {
temp[m] = incomingStream[m];
} else if(s == 0) {
temp[(pageFaults - 1) % frames] = incomingStream[m];
}
cout << endl;
cout << incomingStream[m] << "\t\t\t";
for(n = 0; n < frames; n++) {
if(temp[n] != -1)
cout << " " << temp[n] << "\t\t\t";
else
cout << " - \t\t\t";
}
}

cout << "\nTotal Page Faults:\t" << pageFaults << endl;
cout << "Total Page Hits:\t" << pageHits << endl;
return 0;
}

// LRU
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;
int main() {
vector<int> rs = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
int n = rs.size();
int f = 4;
int pf = 0, pageHit = 0, next = 1;
vector<int> m(10), count(10), flag(25);
unordered_map<int, int> page_hits;
for (int i = 0; i < f; i++) {
count[i] = 0;
m[i] = -1;
}
cout << "\nThe Page Replacement process is -- \n";
cout << "P1" << '\t' << "P2" << '\t' << "P3" << '\t' << "P4" << '\n';
for (int i = 0; i < n; i++) {
page_hits[rs[i]]++;
for (int j = 0; j < f; j++) {
if (m[j] == rs[i]) {
flag[i] = 1;
count[j] = next;
next++;
}
}
if (flag[i] == 0) {
if (i < f) {
m[i] = rs[i];
count[i] = next;
next++;
} else {
int min = 0;
for (int j = 1; j < f; j++) {
if (count[min] > count[j])
min = j;
}

m[min] = rs[i];
count[min] = next;
next++;
}
pf++;
} else {
pageHit++;
}
for (int j = 0; j < f; j++)
cout << m[j] << "\t";
cout << endl;
}
cout << "\nThe number of page faults using LRU are: " << pf << endl;
cout << "The number of page hits are: " << pageHit << endl;
return 0;
}

//Optimal
#include <iostream>
using namespace std;
int main() {
int flag1, flag2, flag3, i, j, k, position, max, faults = 0;
int num_frames = 4;
int frames[num_frames];
int temp[num_frames];
int inputStream[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
int num_pages = sizeof(inputStream) / sizeof(inputStream[0]);
for(i = 0; i < num_frames; i++) {

frames[i] = -1;
}
for(i = 0; i < num_pages; i++) {
flag1 = flag2 = 0;
for(j = 0; j < num_frames; j++) {
if(frames[j] == inputStream[i]) {
flag1 = flag2 = 1;
break;
}
}
if(flag1 == 0) {
for(j = 0; j < num_frames; j++) {
if(frames[j] == -1) {
faults++;
frames[j] = inputStream[i];
flag2 = 1;
break;
}
}
}
if(flag2 == 0) {
flag3 = 0;
for(j = 0; j < num_frames; j++) {
temp[j] = -1;
for(k = i + 1; k < num_pages; k++) {
if(frames[j] == inputStream[k]) {
temp[j] = k;
break;
}
}
}
for(j = 0; j < num_frames; j++) {
if(temp[j] == -1) {
position = j;
flag3 = 1;
break;
}
}
if(flag3 == 0) {
max = temp[0];
position = 0;

for(j = 1; j < num_frames; j++) {
if(temp[j] > max) {
max = temp[j];
position = j;
}
}
}
frames[position] = inputStream[i];
faults++;
}
cout << endl;
for(j = 0; j < num_frames; j++) {
cout << frames[j] << "\t";
}
}
cout << endl << endl;
cout << "Total Page Faults = " << faults << endl;
cout << "Total Hits = " << num_pages - faults << endl;
return 0;
}
